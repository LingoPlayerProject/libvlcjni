From fe61b2b3ded15383b500876ec70f4cf5566ee38e Mon Sep 17 00:00:00 2001
Message-Id: <fe61b2b3ded15383b500876ec70f4cf5566ee38e.1646986976.git.thomas@gllm.fr>
In-Reply-To: <2f52ccaa636f6e528fc9962b071236ca3c0753ca.1646986976.git.thomas@gllm.fr>
References: <2f52ccaa636f6e528fc9962b071236ca3c0753ca.1646986976.git.thomas@gllm.fr>
From: Thomas Guillem <thomas@gllm.fr>
Date: Tue, 8 Feb 2022 17:01:37 +0100
Subject: [PATCH 16/23] access: add a cache helper

Helper that can be used by any accesses, that will save up to 5 contexts
up to 5 seconds (both configurable with a define).

This helper create its own thread that will release the resources when
unused.

This helper also use the gcc destructor attribute to clean everything
when the library is unloaded.

This helper need a destructor, thus it can only be used with gcc and
clang.

(cherry picked from commit 6dcd24dc085e8942d68edd9555c353a9ba4aede0)
Signed-off-by: Thomas Guillem <thomas@gllm.fr>
---
 modules/access/Makefile.am |   8 ++
 modules/access/cache.c     | 207 +++++++++++++++++++++++++++++++++++++
 modules/access/cache.h     | 134 ++++++++++++++++++++++++
 3 files changed, 349 insertions(+)
 create mode 100644 modules/access/cache.c
 create mode 100644 modules/access/cache.h

diff --git a/modules/access/Makefile.am b/modules/access/Makefile.am
index f295947233..8be84055fa 100644
--- a/modules/access/Makefile.am
+++ b/modules/access/Makefile.am
@@ -440,3 +440,11 @@ librist_plugin_la_SOURCES = access/rist.c access/rist.h
 librist_plugin_la_CFLAGS = $(AM_CFLAGS)
 librist_plugin_la_LIBADD = $(SOCKET_LIBS)
 access_LTLIBRARIES += librist_plugin.la
+
+### TOOLS ###
+
+libvlc_access_cache_la_SOURCES = access/cache.c access/cache.h
+libvlc_access_cache_la_LIBADD = $(LTLIBVLCCORE)
+libvlc_access_cache_la_LDFLAGS = -static
+libvlc_access_cache_la_CPPFLAGS = -Dneedsomethinghere
+noinst_LTLIBRARIES += libvlc_access_cache.la
diff --git a/modules/access/cache.c b/modules/access/cache.c
new file mode 100644
index 0000000000..19c79cf4c3
--- /dev/null
+++ b/modules/access/cache.c
@@ -0,0 +1,207 @@
+/*****************************************************************************
+ * cache.c: access cache helper
+ *****************************************************************************
+ * Copyright (C) 2022 VLC authors and VideoLAN
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_threads.h>
+
+#include "access/cache.h"
+
+#include <assert.h>
+
+#define VLC_ACCESS_CACHE_TTL 5000000LL
+#define VLC_ACCESS_CACHE_MAX_ENTRY 5
+
+void
+vlc_access_cache_entry_Delete(struct vlc_access_cache_entry *entry)
+{
+    free(entry->url);
+    free(entry->username);
+
+    entry->free_cb(entry->context);
+    free(entry);
+}
+
+struct vlc_access_cache_entry *
+vlc_access_cache_entry_New(void *context, const char *url, const char *username,
+                           void (*free_cb)(void *context))
+{
+    struct vlc_access_cache_entry *entry = malloc(sizeof(*entry));
+    if (unlikely(entry == NULL))
+        return NULL;
+
+    entry->url = strdup(url);
+    entry->username = username ? strdup(username) : NULL;
+    if (!entry->url || (entry->username == NULL) != (username == NULL))
+    {
+        free(entry->url);
+        free(entry);
+        return NULL;
+    }
+
+    entry->context = context;
+    entry->free_cb = free_cb;
+
+    return entry;
+}
+
+static void *
+vlc_access_cache_Thread(void *data)
+{
+    struct vlc_access_cache *cache = data;
+
+    vlc_mutex_lock(&cache->lock);
+    while (cache->running)
+    {
+        if (!vlc_list_is_empty(&cache->entries))
+        {
+            struct vlc_access_cache_entry *entry =
+                vlc_list_first_entry_or_null(&cache->entries,
+                                             struct vlc_access_cache_entry, node);
+
+            if (entry->timeout == 0 ||
+                vlc_cond_timedwait(&cache->cond, &cache->lock, entry->timeout) != 0)
+            {
+                vlc_list_remove(&entry->node);
+
+                vlc_mutex_unlock(&cache->lock);
+
+                vlc_access_cache_entry_Delete(entry);
+
+                vlc_mutex_lock(&cache->lock);
+            }
+        }
+        else
+            vlc_cond_wait(&cache->cond, &cache->lock);
+    }
+    vlc_mutex_unlock(&cache->lock);
+
+    return NULL;
+}
+
+static void
+vlc_access_cache_InitOnce(void *data)
+{
+    struct vlc_access_cache *cache = data;
+
+    if (cache->init)
+        return;
+    cache->init = true;
+
+    vlc_cond_init(&cache->cond);
+
+#ifdef VLC_ACCESS_CACHE_CAN_REGISTER
+
+    cache->running = true;
+    int ret = vlc_clone(&cache->thread, vlc_access_cache_Thread, cache,
+                        VLC_THREAD_PRIORITY_LOW);
+    if (ret != 0)
+        cache->running = false;
+#endif
+}
+
+void
+vlc_access_cache_Destroy(struct vlc_access_cache *cache)
+{
+    vlc_mutex_lock(&cache->lock);
+    if (cache->running)
+    {
+        cache->running = false;
+        vlc_cond_signal(&cache->cond);
+        vlc_mutex_unlock(&cache->lock);
+        vlc_join(cache->thread, NULL);
+    }
+    else
+        vlc_mutex_unlock(&cache->lock);
+
+    struct vlc_access_cache_entry *entry;
+    vlc_list_foreach(entry, &cache->entries, node)
+        vlc_access_cache_entry_Delete(entry);
+
+    vlc_mutex_destroy(&cache->lock);
+    vlc_cond_destroy(&cache->cond);
+}
+
+void
+vlc_access_cache_AddEntry(struct vlc_access_cache *cache,
+                          struct vlc_access_cache_entry *entry)
+{
+    vlc_mutex_lock(&cache->lock);
+
+    vlc_access_cache_InitOnce(cache);
+
+    if (!cache->running)
+    {
+        vlc_mutex_unlock(&cache->lock);
+        vlc_access_cache_entry_Delete(entry);
+        return;
+    }
+
+    struct vlc_access_cache_entry *it;
+    size_t count = 0;
+    vlc_list_foreach(it, &cache->entries, node)
+        count++;
+
+    if (count >= VLC_ACCESS_CACHE_MAX_ENTRY)
+    {
+        /* Too many entries, signal the thread that will delete the first one */
+        it = vlc_list_first_entry_or_null(&cache->entries,
+                                          struct vlc_access_cache_entry, node);
+        it->timeout = 0;
+    }
+
+    entry->timeout = mdate() + VLC_ACCESS_CACHE_TTL;
+    vlc_list_append(&entry->node, &cache->entries);
+
+    vlc_cond_signal(&cache->cond);
+    vlc_mutex_unlock(&cache->lock);
+}
+
+struct vlc_access_cache_entry *
+vlc_access_cache_GetEntry(struct vlc_access_cache *cache,
+                          const char *url, const char *username)
+{
+    vlc_mutex_lock(&cache->lock);
+
+    vlc_access_cache_InitOnce(cache);
+
+    struct vlc_access_cache_entry *it;
+
+    vlc_list_foreach(it, &cache->entries, node)
+    {
+
+        if (strcmp(url, it->url) == 0
+         && (username == NULL) == (it->username == NULL)
+         && (username != NULL ? strcmp(username, it->username) == 0 : true))
+        {
+            vlc_list_remove(&it->node);
+            vlc_cond_signal(&cache->cond);
+            vlc_mutex_unlock(&cache->lock);
+            return it;
+        }
+    }
+
+    vlc_mutex_unlock(&cache->lock);
+
+    return NULL;
+}
diff --git a/modules/access/cache.h b/modules/access/cache.h
new file mode 100644
index 0000000000..4908a6384b
--- /dev/null
+++ b/modules/access/cache.h
@@ -0,0 +1,134 @@
+/*****************************************************************************
+ * cache.h: access cache helper
+ *****************************************************************************
+ * Copyright (C) 2022 VLC authors and VideoLAN
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_list.h>
+
+struct vlc_access_cache_entry
+{
+    void *context;
+
+    char *url;
+    char *username;
+
+    mtime_t timeout;
+    void (*free_cb)(void *context);
+
+    struct vlc_list node;
+};
+
+struct vlc_access_cache
+{
+    bool init;
+    vlc_mutex_t lock;
+    vlc_cond_t cond;
+    vlc_thread_t thread;
+    bool running;
+
+    struct vlc_list entries;
+};
+
+#define VLC_ACCESS_CACHE_INITIALIZER(name) { \
+    .init = false, \
+    .lock = VLC_STATIC_MUTEX, \
+    .running = false, \
+    .entries = VLC_LIST_INITIALIZER(&name.entries), \
+}
+
+static inline char *
+vlc_access_cache_entry_CreateSmbUrl(const char *server, const char *share)
+{
+    char *url;
+    if (asprintf(&url, "smb://%s/%s", server, share) == -1)
+        return NULL;
+    return url;
+}
+
+struct vlc_access_cache_entry *
+vlc_access_cache_entry_New(void *context, const char *url, const char *username,
+                           void (*free_cb)(void *context));
+
+static inline struct vlc_access_cache_entry *
+vlc_access_cache_entry_NewSmb(void *context, const char *server,
+                              const char *share, const char *username,
+                              void (*free_cb)(void *context))
+{
+    char *url = vlc_access_cache_entry_CreateSmbUrl(server, share);
+    if (url == NULL)
+        return NULL;
+
+    struct vlc_access_cache_entry *entry =
+        vlc_access_cache_entry_New(context, url, username, free_cb);
+    free(url);
+    return entry;
+}
+
+void
+vlc_access_cache_entry_Delete(struct vlc_access_cache_entry *entry);
+
+void
+vlc_access_cache_Destroy(struct vlc_access_cache *cache);
+
+void
+vlc_access_cache_AddEntry(struct vlc_access_cache *cache,
+                          struct vlc_access_cache_entry *entry);
+
+struct vlc_access_cache_entry *
+vlc_access_cache_GetEntry(struct vlc_access_cache *cache,
+                          const char *url, const char *username);
+
+static inline struct vlc_access_cache_entry *
+vlc_access_cache_GetSmbEntry(struct vlc_access_cache *cache,
+                             const char *server, const char *share,
+                             const char *username)
+{
+    char *url = vlc_access_cache_entry_CreateSmbUrl(server, share);
+    if (url == NULL)
+        return NULL;
+
+    struct vlc_access_cache_entry *entry =
+        vlc_access_cache_GetEntry(cache, url, username);
+    free(url);
+
+    return entry;
+}
+
+#ifdef __has_attribute
+  #if __has_attribute(destructor)
+    #define VLC_ACCESS_CACHE_CAN_REGISTER
+  #endif
+#endif
+
+#ifdef VLC_ACCESS_CACHE_CAN_REGISTER
+#define VLC_ACCESS_CACHE_REGISTER(name) \
+static struct vlc_access_cache name = VLC_ACCESS_CACHE_INITIALIZER(name); \
+__attribute__((destructor)) static void vlc_access_cache_destructor_##name(void) \
+{ \
+    vlc_access_cache_Destroy(&name); \
+}
+#else
+#define VLC_ACCESS_CACHE_REGISTER(name) \
+static struct vlc_access_cache name = VLC_ACCESS_CACHE_INITIALIZER(name);
+#warning "can't register access cache"
+#endif
-- 
2.30.2

